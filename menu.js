// –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞–º–∏ (–∏–º–ø–æ—Ä—Ç –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏)
class SectionManager {
    constructor() {
        this.sections = JSON.parse(localStorage.getItem('uptaxi_sections')) || [
            { 
                id: 'section1', 
                name: '–†–∞–∑–¥–µ–ª 1', 
                icon: 'üìÅ',
                accessLevel: 1,
                subsections: [
                    { id: 'subsection1', name: '–ü–æ–¥—Ä–∞–∑–¥–µ–ª 1', accessLevel: 1 },
                    { id: 'subsection2', name: '–ü–æ–¥—Ä–∞–∑–¥–µ–ª 2', accessLevel: 2 },
                    { id: 'subsection3', name: '–ü–æ–¥—Ä–∞–∑–¥–µ–ª 3', accessLevel: 3 }
                ]
            },
            { 
                id: 'section2', 
                name: '–†–∞–∑–¥–µ–ª 2', 
                icon: 'üìÇ',
                accessLevel: 2,
                subsections: [
                    { id: 'subsection1', name: '–ü–æ–¥—Ä–∞–∑–¥–µ–ª 1', accessLevel: 2 },
                    { id: 'subsection2', name: '–ü–æ–¥—Ä–∞–∑–¥–µ–ª 2', accessLevel: 2 },
                    { id: 'subsection3', name: '–ü–æ–¥—Ä–∞–∑–¥–µ–ª 3', accessLevel: 3 }
                ]
            },
            { 
                id: 'section3', 
                name: '–†–∞–∑–¥–µ–ª 3', 
                icon: 'üìã',
                accessLevel: 3,
                subsections: [
                    { id: 'subsection1', name: '–ü–æ–¥—Ä–∞–∑–¥–µ–ª 1', accessLevel: 3 },
                    { id: 'subsection2', name: '–ü–æ–¥—Ä–∞–∑–¥–µ–ª 2', accessLevel: 3 },
                    { id: 'subsection3', name: '–ü–æ–¥—Ä–∞–∑–¥–µ–ª 3', accessLevel: 3 }
                ]
            }
        ];
    }

    getSections() {
        return this.sections;
    }

    getSectionsForUser(userAccessLevel) {
        return this.sections.filter(section => section.accessLevel <= userAccessLevel);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤
const sectionManager = new SectionManager();

// –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
class ContentManager {
    constructor() {
        this.content = JSON.parse(localStorage.getItem('uptaxi_content')) || {};
        this.googleDocs = JSON.parse(localStorage.getItem('uptaxi_googleDocs')) || [];
        this.files = JSON.parse(localStorage.getItem('uptaxi_files')) || [];
        this.activities = JSON.parse(localStorage.getItem('uptaxi_activities')) || [
            {
                id: 1,
                title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É',
                icon: 'üéâ',
                date: new Date().toLocaleDateString('ru-RU'),
                createdAt: new Date().toLocaleDateString('ru-RU')
            }
        ];
    }

    saveContent() {
        localStorage.setItem('uptaxi_content', JSON.stringify(this.content));
        localStorage.setItem('uptaxi_googleDocs', JSON.stringify(this.googleDocs));
        localStorage.setItem('uptaxi_files', JSON.stringify(this.files));
        localStorage.setItem('uptaxi_activities', JSON.stringify(this.activities));
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (typeof ServerUtils !== 'undefined' && serverAvailable) {
            ServerUtils.saveData('uptaxi_content', this.content);
            ServerUtils.saveData('uptaxi_googleDocs', this.googleDocs);
            ServerUtils.saveData('uptaxi_files', this.files);
            ServerUtils.saveData('uptaxi_activities', this.activities);
        }
    }

    addContent(section, subsection, title, description) {
        const key = `${section}_${subsection}`;
        if (!this.content[key]) this.content[key] = [];
        
        this.content[key].push({
            id: Date.now(),
            title,
            description,
            createdAt: new Date().toLocaleDateString()
        });
        this.saveContent();
    }

    addGoogleDoc(title, url, sectionId, subsectionId) {
        this.googleDocs.push({
            id: Date.now(),
            title,
            url,
            sectionId,
            subsectionId,
            createdAt: new Date().toLocaleDateString()
        });
        this.saveContent();
    }

    addFile(name, url, sectionId, subsectionId, type) {
        this.files.push({
            id: Date.now(),
            name,
            url,
            sectionId,
            subsectionId,
            type,
            createdAt: new Date().toLocaleDateString()
        });
        this.saveContent();
    }

    addActivity(title, icon) {
        this.activities.push({
            id: Date.now(),
            title,
            icon,
            date: new Date().toLocaleDateString('ru-RU'),
            createdAt: new Date().toLocaleDateString('ru-RU')
        });
        this.saveContent();
    }

    getActivities() {
        return this.activities.slice(-5).reverse(); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
    }

    getContent(section, subsection) {
        const key = `${section}_${subsection}`;
        return this.content[key] || [];
    }

    getGoogleDocs(sectionId, subsectionId) {
        return this.googleDocs.filter(doc => 
            doc.sectionId === sectionId && doc.subsectionId === subsectionId
        );
    }

    getFiles(sectionId, subsectionId) {
        return this.files.filter(file => 
            file.sectionId === sectionId && file.subsectionId === subsectionId
        );
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
const contentManager = new ContentManager();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function checkAuth() {
    if (!auth.isLoggedIn()) {
        window.location.href = 'index.html';
        return false;
    }
    return true;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
function loadDynamicSections() {
    const user = auth.currentUser;
    if (!user) return;

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–∑–¥–µ–ª—ã –∏–∑ localStorage
    sectionManager.sections = JSON.parse(localStorage.getItem('uptaxi_sections')) || sectionManager.sections;
    
    console.log('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:', sectionManager.sections);
    
    // –ê–¥–º–∏–Ω—ã –≤–∏–¥—è—Ç –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã, –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —Ç–æ–ª—å–∫–æ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å
    let availableSections;
    if (user.role === 'admin') {
        availableSections = sectionManager.sections; // –ê–¥–º–∏–Ω—ã –≤–∏–¥—è—Ç –≤—Å–µ
    } else {
        const userAccessLevel = user.accessLevel || 1;
        console.log('–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userAccessLevel);
        availableSections = sectionManager.sections.filter(section => {
            console.log(`–†–∞–∑–¥–µ–ª ${section.name}: —É—Ä–æ–≤–µ–Ω—å ${section.accessLevel}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userAccessLevel}`);
            return section.accessLevel === userAccessLevel;
        });
    }
    
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', availableSections);
    
    const dynamicSectionsContainer = document.getElementById('dynamic-sections');
    const quickLinksContainer = document.getElementById('quick-links');
    
    if (!dynamicSectionsContainer || !quickLinksContainer) return;
    
    let sectionsHtml = '';
    let quickLinksHtml = '';
    
    availableSections.forEach(section => {
        // –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã –ø–æ —É—Ä–æ–≤–Ω—é –¥–æ—Å—Ç—É–ø–∞
        let availableSubsections;
        if (user.role === 'admin') {
            availableSubsections = section.subsections; // –ê–¥–º–∏–Ω—ã –≤–∏–¥—è—Ç –≤—Å–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã
        } else {
            const userAccessLevel = user.accessLevel || 1;
            availableSubsections = section.subsections.filter(sub => sub.accessLevel === userAccessLevel);
        }
        
        if (availableSubsections.length > 0) {
            sectionsHtml += `
                <li class="nav-item">
                    <a href="#" class="section-toggle" onclick="toggleSubmenu(this); return false;">
                        <span class="icon">${section.icon}</span>
                        <span>${section.name}</span>
                        <span class="arrow">‚ñº</span>
                    </a>
                    <ul class="subsection-menu">
            `;
            
            availableSubsections.forEach(subsection => {
                sectionsHtml += `
                    <li><a href="#" onclick="showContent('${section.id}', '${subsection.id}'); return false;">${subsection.name}</a></li>
                `;
            });
            
            sectionsHtml += `
                    </ul>
                </li>
            `;
            
            // –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ä–∞–∑–¥–µ–ª –≤ –±—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏
            if (availableSubsections.length > 0) {
                quickLinksHtml += `
                    <a href="#" onclick="showContent('${section.id}', '${availableSubsections[0].id}'); return false;" class="quick-link">
                        <span class="icon">${section.icon}</span>
                        <span>${section.name} - ${availableSubsections[0].name}</span>
                    </a>
                `;
            }
        }
    });
    
    if (sectionsHtml === '') {
        sectionsHtml = '<li><p style="padding: 15px; color: rgba(255,255,255,0.7);">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤</p></li>';
    }
    
    if (quickLinksHtml === '') {
        quickLinksHtml = '<p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤</p>';
    }
    
    dynamicSectionsContainer.innerHTML = sectionsHtml;
    quickLinksContainer.innerHTML = quickLinksHtml;
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–º–µ–Ω—é
function toggleSubmenu(element) {
    if (event) event.preventDefault();
    const menuItem = element.parentElement;
    const isActive = menuItem.classList.contains('active');
    
    // –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–¥–º–µ–Ω—é
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });
    
    // –û—Ç–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–µ–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω—ã–º
    if (!isActive) {
        menuItem.classList.add('active');
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –¥–∞—à–±–æ—Ä–¥–∞
function showDashboard() {
    // –£–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });
    
    // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–∞—à–±–æ—Ä–¥
    document.querySelector('.nav-item').classList.add('active');
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—à–±–æ—Ä–¥
    document.getElementById('dashboard').style.display = 'block';
    
    // –°–∫—Ä—ã—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const dynamicContent = document.getElementById('dynamic-content');
    if (dynamicContent) {
        dynamicContent.style.display = 'none';
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
    const breadcrumb = document.getElementById('breadcrumb');
    if (breadcrumb) {
        breadcrumb.innerHTML = '<span>–ì–ª–∞–≤–Ω–∞—è</span>';
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç
function switchToContent() {
    // –°–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥
    document.getElementById('dashboard').style.display = 'none';
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const dynamicContent = document.getElementById('dynamic-content');
    if (dynamicContent) {
        dynamicContent.style.display = 'block';
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
function showContent(sectionId, subsectionId) {
    if (event) event.preventDefault();
    
    const user = auth.currentUser;
    const sectionData = sectionManager.sections.find(s => s.id === sectionId);
    const subsectionData = sectionData?.subsections.find(sub => sub.id === subsectionId);
    
    if (!sectionData || !subsectionData) {
        alert('–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ä–∞–∑–¥–µ–ª—É
    if (user.role !== 'admin') {
        const userAccessLevel = user.accessLevel || 1;
        if (userAccessLevel !== subsectionData.accessLevel) {
            alert('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É');
            return;
        }
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç
    switchToContent();
    
    const contentArea = document.getElementById('dynamic-content');
    if (!contentArea) return;
    
    // –£–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
    const breadcrumb = document.getElementById('breadcrumb');
    if (breadcrumb) {
        breadcrumb.innerHTML = `<span>–ì–ª–∞–≤–Ω–∞—è</span><span class="separator">></span><span>${sectionData.name} - ${subsectionData.name}</span>`;
    }
    
    let html = `
        <div class="section-header">
            <h1>${sectionData.name} - ${subsectionData.name}</h1>
            <p>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ä–∞–∑–¥–µ–ª–∞</p>
            <div class="section-actions" style="margin-top: 15px; display: flex; gap: 10px; flex-wrap: wrap; justify-content: center;">
                <button onclick="showDashboard()" class="btn-primary">
                    <span class="icon">üè†</span>
                    –ì–ª–∞–≤–Ω–∞—è
                ${auth.isAdmin() || user.role === 'admin' ? `
                    <button onclick="openAddContentModal('${sectionId}', '${subsectionId}')" class="btn-primary">
                        <span class="icon">üìù</span>
                        –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    </button>
                    <button onclick="openAddDocModal('${sectionId}', '${subsectionId}')" class="btn-primary">
                        <span class="icon">üìÑ</span>
                        –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
                    </button>
                    <button onclick="openUploadFileModal('${sectionId}', '${subsectionId}')" class="btn-primary">
                        <span class="icon">üìÅ</span>
                        –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã
                    </button>
                ` : ''}
            </div>
        </div>
    `;
    
    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
    const content = contentManager.getContent(sectionId, subsectionId);
    const googleDocs = contentManager.getGoogleDocs(sectionId, subsectionId);
    const files = contentManager.getFiles(sectionId, subsectionId);
    
    const totalItems = content.length + googleDocs.length + files.length;
    
    if (totalItems === 0) {
        html += `
            <div class="empty-state">
                <div class="empty-icon">üìÅ</div>
                <h3>–†–∞–∑–¥–µ–ª –ø—É—Å—Ç</h3>
                <p>–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.</p>
            </div>
        `;
    } else {
        html += '<div class="content-grid">';
        
        // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content.forEach(item => {
            const isLongContent = item.description.length > 200;
            const contentId = `content-${item.id}`;
            const savedWidth = localStorage.getItem(`content-width-${item.id}`) || '';
            const widthStyle = savedWidth ? `style="width: ${savedWidth}px;"` : '';
            const adminResizable = (auth.isAdmin() || user.role === 'admin') ? 'admin-resizable' : '';
            
            html += `
                <div class="content-card ${adminResizable}" ${widthStyle} data-content-id="${item.id}">
                    <div class="card-header">
                        <h3>${item.title}</h3>
                        <span class="date">${item.createdAt}</span>
                    </div>
                    <div class="card-content">
                        <div class="content-text ${isLongContent ? 'collapsed' : ''}" id="${contentId}">
                            ${item.description.replace(/\n/g, '<br>')}
                        </div>
                        ${isLongContent ? `
                            <button class="expand-btn" onclick="toggleContent('${contentId}', this)">
                                –ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ
                            </button>
                        ` : ''}
                        ${auth.isAdmin() || user.role === 'admin' ? `
                            <div style="display: flex; gap: 100px; margin-top: 10px;">
                                <button onclick="editContentFromMenu('${sectionId}_${subsectionId}', ${item.id})" class="btn-edit" style="margin-top: 10px; padding: 5px 10px; font-size: 12px;">
                                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                </button>
                            <button onclick="deleteContentFromMenu('${sectionId}_${subsectionId}', ${item.id})" class="btn-danger" style="margin-top: 10px; padding: 5px 10px; font-size: 12px;">
                                –£–¥–∞–ª–∏—Ç—å
                            </button>
                        </div>
                        ` : ''}
                    </div>
                </div>
            `;
        });
        
        // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å Google –¥–æ–∫—É–º–µ–Ω—Ç—ã
        googleDocs.forEach(doc => {
            html += `
                <div class="content-card">
                    <div class="card-header">
                        <h3>üìÑ ${doc.title}</h3>
                        <span class="date">${doc.createdAt}</span>
                    </div>
                    <div class="card-content">
                        <p>Google –¥–æ–∫—É–º–µ–Ω—Ç</p>
                        <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                            <button onclick="openGoogleDocEmbed('${doc.url}', '${doc.title}')" class="doc-embed-link">
                                <span class="icon">üëÅÔ∏è</span>
                                –ü—Ä–æ—Å–º–æ—Ç—Ä
                            </button>
                            <a href="${doc.url}" target="_blank" class="doc-link">
                                <span class="icon">üîó</span>
                                –û—Ç–∫—Ä—ã—Ç—å –≤ Google
                            </a>
                        </div>
                        ${auth.isAdmin() || user.role === 'admin' ? `
                            <button onclick="deleteDocFromMenu(${doc.id})" class="btn-danger" style="margin-top: 10px; padding: 5px 10px; font-size: 12px;">
                                –£–¥–∞–ª–∏—Ç—å
                            </button>
                        ` : ''}
                    </div>
                </div>
            `;
        });
        
        // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ñ–∞–π–ª—ã
        files.forEach(file => {
            if (file.type && file.type.startsWith('image/')) {
                html += `
                    <div class="photo-gallery-item" onclick="viewPhoto('${file.url}', '${file.name}')">
                        <img src="${file.url}" alt="${file.name}">
                        <div class="photo-info">
                            <div class="photo-title">${file.name}</div>
                        </div>
                        ${auth.isAdmin() || user.role === 'admin' ? `
                        ` : ''}
                    </div>
                `;
            } else {
                html += `
                    <div class="content-card">
                        <div class="card-header">
                            <h3>üìÅ ${file.name}</h3>
                            <span class="date">${file.createdAt}</span>
                        </div>
                        <div class="card-content">
                            <p>–§–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è</p>
                            <a href="${file.url}" target="_blank" class="doc-link">–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª</a>
                            ${auth.isAdmin() || user.role === 'admin' ? `
                                <button onclick="deleteFileFromMenu(${file.id})" class="btn-danger" style="margin-top: 10px; padding: 5px 10px; font-size: 12px;">
                                    –£–¥–∞–ª–∏—Ç—å
                                </button>
                            </div>
                            ` : ''}
                        </div>
                    </div>
                `;
            }
        });
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ–±–µ—Ä–Ω—É—Ç—å –∏—Ö –≤ –≥–∞–ª–µ—Ä–µ—é
        const imageFiles = files.filter(file => file.type && file.type.startsWith('image/'));
        if (imageFiles.length > 0) {
            html = html.replace('<div class="content-grid">', '<div class="content-grid">');
            // –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –≥–∞–ª–µ—Ä–µ—é –¥–ª—è —Ñ–æ—Ç–æ
            let photoGalleryHtml = '<div class="photo-gallery">';
            imageFiles.forEach(file => {
                photoGalleryHtml += `
                    <div class="photo-gallery-item" onclick="viewPhoto('${file.url}', '${file.name}')">
                        <img src="${file.url}" alt="${file.name}">
                        <div class="photo-info">
                            <div class="photo-date">${file.createdAt}</div>
                        </div>
                        ${auth.isAdmin() || user.role === 'admin' ? `
                            <button onclick="event.stopPropagation(); deleteFileFromMenu(${file.id})" class="btn-danger" style="position: absolute; top: 10px; right: 10px; padding: 5px 8px; font-size: 12px;">
                                ‚úï
                            </button>
                        ` : ''}
                    </div>
                `;
            });
            photoGalleryHtml += '</div>';
            
            // –ó–∞–º–µ–Ω–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ –Ω–∞ –≥–∞–ª–µ—Ä–µ—é
            html = html.replace(/<div class="photo-gallery-item"[^>]*>.*?<\/div>/gs, '');
            html += photoGalleryHtml;
        }
        
        html += '</div>';
    }
    
    contentArea.innerHTML = html;
    
    // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if (auth.isAdmin() || user.role === 'admin') {
        setupResizeHandlers();
    }
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
function setupResizeHandlers() {
    const resizableCards = document.querySelectorAll('.content-card.admin-resizable');
    
    resizableCards.forEach(card => {
        const contentId = card.getAttribute('data-content-id');
        if (!contentId) return;
        
        // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –∏–∑ localStorage
        const savedWidth = localStorage.getItem(`content-width-${contentId}`);
        if (savedWidth && savedWidth !== 'null') {
            card.style.width = savedWidth + 'px';
        }
        
        // –°–æ–∑–¥–∞—Ç—å ResizeObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–∞
        const resizeObserver = new ResizeObserver(entries => {
            for (let entry of entries) {
                const width = entry.contentRect.width;
                if (width > 300) { // –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π
                    localStorage.setItem(`content-width-${contentId}`, width);
                    console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —à–∏—Ä–∏–Ω–∞ ${width}px –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ${contentId}`);
                    
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å layout —Å–µ—Ç–∫–∏
                    const grid = card.closest('.content-grid');
                    if (grid) {
                        grid.style.gridTemplateColumns = 'repeat(auto-fit, minmax(300px, max-content))';
                    }
                }
            }
        });
        
        resizeObserver.observe(card);
        
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å observer –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
        card._resizeObserver = resizeObserver;
    });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏ –≤ –º–µ–Ω—é
function openModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'flex';
    }
}

function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'none';
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
function openAddContentModal(sectionId, subsectionId) {
    document.getElementById('contentSectionId').value = sectionId;
    document.getElementById('contentSubsectionId').value = subsectionId;
    openModal('addContentModal');
}

function openAddDocModal(sectionId, subsectionId) {
    document.getElementById('docSectionId').value = sectionId;
    document.getElementById('docSubsectionId').value = subsectionId;
    openModal('addDocModal');
}

function openUploadFileModal(sectionId, subsectionId) {
    document.getElementById('fileSectionId').value = sectionId;
    document.getElementById('fileSubsectionId').value = subsectionId;
    openModal('uploadFileModal');
}

function openUploadPhotoModal(sectionId, subsectionId) {
    document.getElementById('photoSectionId').value = sectionId;
    document.getElementById('photoSubsectionId').value = subsectionId;
    openModal('uploadPhotoModal');
}

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –º–µ–Ω—é
function editContentFromMenu(key, id) {
    if (!auth.isAdmin() && auth.currentUser.role !== 'admin') return;
    
    const content = contentManager.content[key];
    if (!content) return;
    
    const item = content.find(c => c.id === id);
    if (!item) return;
    
    // –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    document.getElementById('editContentKey').value = key;
    document.getElementById('editContentId').value = id;
    document.getElementById('editContentTitle').value = item.title;
    document.getElementById('editContentDescription').value = item.description;
    
    openModal('editContentModal');
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
function updateContentFromMenu(key, id, title, description) {
    if (!contentManager.content[key]) return false;
    
    const itemIndex = contentManager.content[key].findIndex(item => item.id === id);
    if (itemIndex === -1) return false;
    
    contentManager.content[key][itemIndex].title = title;
    contentManager.content[key][itemIndex].description = description;
    contentManager.saveContent();
    
    // –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    contentManager.addActivity(`–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${title}`, '‚úèÔ∏è');
    
    return true;
}

// –§—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –º–µ–Ω—é
function deleteContentFromMenu(key, id) {
    if (!auth.isAdmin() && auth.currentUser.role !== 'admin') return;
    
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?')) {
        let content = JSON.parse(localStorage.getItem('uptaxi_content')) || {};
        if (content[key]) {
            content[key] = content[key].filter(item => item.id !== id);
            localStorage.setItem('uptaxi_content', JSON.stringify(content));
            contentManager.content = content;
            
            // –ù–∞–π—Ç–∏ —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª –∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª
            const parts = key.split('_');
            if (parts.length === 2) {
                showContent(parts[0], parts[1]);
            }
        }
    }
}

function deleteDocFromMenu(id) {
    if (!auth.isAdmin() && auth.currentUser.role !== 'admin') return;
    
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç?')) {
        let googleDocs = JSON.parse(localStorage.getItem('uptaxi_googleDocs')) || [];
        const doc = googleDocs.find(d => d.id === id);
        googleDocs = googleDocs.filter(doc => doc.id !== id);
        localStorage.setItem('uptaxi_googleDocs', JSON.stringify(googleDocs));
        contentManager.googleDocs = googleDocs;
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª
        if (doc) {
            showContent(doc.sectionId, doc.subsectionId);
        }
    }
}

function deleteFileFromMenu(id) {
    if (!auth.isAdmin() && auth.currentUser.role !== 'admin') return;
    
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª?')) {
        let files = JSON.parse(localStorage.getItem('uptaxi_files')) || [];
        const file = files.find(f => f.id === id);
        files = files.filter(file => file.id !== id);
        localStorage.setItem('uptaxi_files', JSON.stringify(files));
        contentManager.files = files;
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª
        if (file) {
            showContent(file.sectionId, file.subsectionId);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ –º–µ–Ω—é
async function uploadFiles() {
    const fileInput = document.getElementById('fileUpload');
    const files = fileInput.files;
    const sectionId = document.getElementById('fileSectionId').value;
    const subsectionId = document.getElementById('fileSubsectionId').value;
    
    if (files.length === 0) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
        return;
    }
    
    if (!sectionId || !subsectionId) {
        alert('–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª');
        return;
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ
    for (const file of files) {
        let fileData;
        
        if (typeof ServerUtils !== 'undefined' && serverAvailable) {
            try {
                fileData = await ServerUtils.uploadFile(file, sectionId, subsectionId);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
                fileData = {
                    url: URL.createObjectURL(file),
                    filename: file.name,
                    size: file.size,
                    type: file.type
                };
            }
        } else {
            fileData = {
                url: URL.createObjectURL(file),
                filename: file.name,
                size: file.size,
                type: file.type
            };
        }
        
        contentManager.addFile(fileData.filename, fileData.url, sectionId, subsectionId, file.type);
    }
    
    // –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    contentManager.addActivity(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`, 'üìÅ');
    
    closeModal('uploadFileModal');
    fileInput.value = '';
    alert('–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª
    showContent(sectionId, subsectionId);
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
async function uploadPhotos() {
    const photoInput = document.getElementById('photoUpload');
    const photos = photoInput.files;
    const sectionId = document.getElementById('photoSectionId').value;
    const subsectionId = document.getElementById('photoSubsectionId').value;
    
    if (photos.length === 0) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
        return;
    }
    
    if (!sectionId || !subsectionId) {
        alert('–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª');
        return;
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ
    for (const photo of photos) {
        if (photo.type.startsWith('image/')) {
            let photoData;
            
            if (typeof ServerUtils !== 'undefined' && serverAvailable) {
                try {
                    photoData = await ServerUtils.uploadFile(photo, sectionId, subsectionId);
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
                    photoData = {
                        url: URL.createObjectURL(photo),
                        filename: photo.name,
                        size: photo.size,
                        type: photo.type
                    };
                }
            } else {
                photoData = {
                    url: URL.createObjectURL(photo),
                    filename: photo.name,
                    size: photo.size,
                    type: photo.type
                };
            }
            
            contentManager.addFile(photoData.filename, photoData.url, sectionId, subsectionId, photo.type);
        }
    }
    
    // –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    contentManager.addActivity(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${photos.length}`, 'üì∑');
    
    closeModal('uploadPhotoModal');
    photoInput.value = '';
    document.getElementById('photoPreview').style.display = 'none';
    document.getElementById('photoPreviewGrid').innerHTML = '';
    alert('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª
    showContent(sectionId, subsectionId);
}

// –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
function previewPhotos() {
    const photoInput = document.getElementById('photoUpload');
    const previewContainer = document.getElementById('photoPreview');
    const previewGrid = document.getElementById('photoPreviewGrid');
    
    if (photoInput.files.length === 0) {
        previewContainer.style.display = 'none';
        return;
    }
    
    previewContainer.style.display = 'block';
    previewGrid.innerHTML = '';
    
    Array.from(photoInput.files).forEach((file, index) => {
        if (file.type.startsWith('image/')) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const previewItem = document.createElement('div');
                previewItem.className = 'photo-preview-item';
                previewItem.innerHTML = `
                    <img src="${e.target.result}" alt="${file.name}">
                    <div class="photo-name">${file.name}</div>
                    <button class="remove-photo" onclick="removePhotoFromPreview(${index})">‚úï</button>
                `;
                previewGrid.appendChild(previewItem);
            };
            reader.readAsDataURL(file);
        }
    });
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
function removePhotoFromPreview(index) {
    const photoInput = document.getElementById('photoUpload');
    const dt = new DataTransfer();
    
    Array.from(photoInput.files).forEach((file, i) => {
        if (i !== index) {
            dt.items.add(file);
        }
    });
    
    photoInput.files = dt.files;
    previewPhotos();
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ
function viewPhoto(url, title) {
    const modal = document.createElement('div');
    modal.className = 'photo-modal show';
    modal.innerHTML = `
        <div class="photo-modal-content">
            <button class="photo-modal-close" onclick="this.parentElement.parentElement.remove()">‚úï</button>
            <img src="${url}" alt="${title}">
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            modal.remove();
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ/—Å–≤–µ—Ä–Ω—É—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
function toggleContent(contentId, button) {
    const contentElement = document.getElementById(contentId);
    const isCollapsed = contentElement.classList.contains('collapsed');
    
    if (isCollapsed) {
        contentElement.classList.remove('collapsed');
        button.textContent = '–°–≤–µ—Ä–Ω—É—Ç—å';
    } else {
        contentElement.classList.add('collapsed');
        button.textContent = '–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ';
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ URL –¥–æ–∫—É–º–µ–Ω—Ç–∞
let currentGoogleDocUrl = '';

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è Google –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–µ
function openGoogleDocEmbed(url, title) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å URL –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è
    let embedUrl = url;
    
    // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Docs, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ—ë –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è
    if (url.includes('docs.google.com/document/d/')) {
        const docId = url.match(/\/document\/d\/([a-zA-Z0-9-_]+)/);
        if (docId) {
            embedUrl = `https://docs.google.com/document/d/${docId[1]}/preview`;
        }
    } else if (url.includes('docs.google.com/spreadsheets/d/')) {
        const docId = url.match(/\/spreadsheets\/d\/([a-zA-Z0-9-_]+)/);
        if (docId) {
            embedUrl = `https://docs.google.com/spreadsheets/d/${docId[1]}/preview`;
        }
    } else if (url.includes('docs.google.com/presentation/d/')) {
        const docId = url.match(/\/presentation\/d\/([a-zA-Z0-9-_]+)/);
        if (docId) {
            embedUrl = `https://docs.google.com/presentation/d/${docId[1]}/preview`;
        }
    }
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ"
    currentGoogleDocUrl = url;
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ URL –≤ iframe
    document.getElementById('googleDocTitle').textContent = title;
    document.getElementById('googleDocFrame').src = embedUrl;
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    openModal('googleDocModal');
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
function openGoogleDocInNewTab() {
    if (currentGoogleDocUrl) {
        window.open(currentGoogleDocUrl, '_blank');
    }
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ–≤ —Ä–∞–∑–¥–µ–ª–æ–≤
function fillSectionSelects(modalId) {
    const sectionSelect = document.getElementById(modalId === 'addContentModal' ? 'contentSection' : 'docSection');
    const subsectionSelect = document.getElementById(modalId === 'addContentModal' ? 'contentSubsection' : 'docSubsection');
    
    if (sectionSelect && subsectionSelect) {
        sectionSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª</option>';
        sectionManager.sections.forEach(section => {
            sectionSelect.innerHTML += `<option value="${section.id}">${section.name}</option>`;
        });
        
        sectionSelect.onchange = function() {
            const selectedSectionId = this.value;
            const selectedSection = sectionManager.sections.find(s => s.id === selectedSectionId);
            
            subsectionSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª</option>';
            if (selectedSection) {
                selectedSection.subsections.forEach(subsection => {
                    subsectionSelect.innerHTML += `<option value="${subsection.id}">${subsection.name}</option>`;
                });
            }
        };
        
        // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        subsectionSelect.innerHTML = '<option value="">–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª</option>';
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ—Ä–º
function setupFormHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const addContentForm = document.getElementById('addContentForm');
    if (addContentForm) {
        addContentForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const sectionId = document.getElementById('contentSectionId').value;
            const subsectionId = document.getElementById('contentSubsectionId').value;
            const title = document.getElementById('contentTitle').value;
            const description = document.getElementById('contentDescription').value;
            
            console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', { sectionId, subsectionId, title, description });
            
            if (!sectionId || !subsectionId) {
                alert('–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª');
                return;
            }
            
            if (!title.trim() || !description.trim()) {
                alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
                return;
            }
            
            contentManager.addContent(sectionId, subsectionId, title, description);
            contentManager.addActivity(`–î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${title}`, 'üìù');
            
            closeModal('addContentModal');
            addContentForm.reset();
            
            // –û—Å—Ç–∞—Ç—å—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞–∑–¥–µ–ª–µ
            showContent(sectionId, subsectionId);
            
            alert('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const addDocForm = document.getElementById('addDocForm');
    if (addDocForm) {
        addDocForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const sectionId = document.getElementById('docSectionId').value;
            const subsectionId = document.getElementById('docSubsectionId').value;
            const title = document.getElementById('docTitle').value;
            const url = document.getElementById('docUrl').value;
            
            if (!sectionId || !subsectionId) {
                alert('–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª');
                return;
            }
            
            contentManager.addGoogleDoc(title, url, sectionId, subsectionId);
            contentManager.addActivity(`–î–æ–±–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: ${title}`, 'üìÑ');
            
            closeModal('addDocModal');
            addDocForm.reset();
            
            // –û—Å—Ç–∞—Ç—å—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞–∑–¥–µ–ª–µ
            showContent(sectionId, subsectionId);
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const editContentForm = document.getElementById('editContentForm');
    if (editContentForm) {
        editContentForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const key = document.getElementById('editContentKey').value;
            const id = parseInt(document.getElementById('editContentId').value);
            const title = document.getElementById('editContentTitle').value;
            const description = document.getElementById('editContentDescription').value;
            
            if (!title.trim() || !description.trim()) {
                alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
                return;
            }
            
            if (updateContentFromMenu(key, id, title, description)) {
                alert('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
                closeModal('editContentModal');
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª
                const parts = key.split('_');
                if (parts.length === 2) {
                    showContent(parts[0], parts[1]);
                }
            } else {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ
    const photoInput = document.getElementById('photoUpload');
    if (photoInput) {
        photoInput.addEventListener('change', previewPhotos);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
function updateRecentActivity() {
    const activities = contentManager.getActivities();
    const activityContainer = document.getElementById('recent-activity');
    
    if (!activityContainer) return;
    
    let html = '';
    activities.forEach(activity => {
        html += `
            <div class="activity-item">
                <div class="activity-icon">${activity.icon}</div>
                <div class="activity-info">
                    <p>${activity.title}</p>
                    <small>${activity.date}</small>
                </div>
                ${auth.isAdmin() ? `<button class="btn-danger" onclick="deleteActivity(${activity.id})" style="margin-left: auto; padding: 5px 10px; font-size: 12px;">–£–¥–∞–ª–∏—Ç—å</button>` : ''}
            </div>
        `;
    });
    
    if (activities.length === 0) {
        html = '<p>–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</p>';
    }
    
    activityContainer.innerHTML = html;
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
function deleteActivity(id) {
    if (!auth.isAdmin()) return;
    
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ?')) {
        let activities = JSON.parse(localStorage.getItem('uptaxi_activities')) || [];
        activities = activities.filter(activity => activity.id !== id);
        localStorage.setItem('uptaxi_activities', JSON.stringify(activities));
        contentManager.activities = activities;
        updateRecentActivity();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    if (checkAuth()) {
        const user = auth.currentUser;
        
        // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–¥–µ–ª—ã
        loadDynamicSections();
        
        document.getElementById('currentUser').textContent = user.username;
        document.getElementById('userInitials').textContent = user.username.charAt(0).toUpperCase();
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if (auth.isAdmin()) {
            document.querySelectorAll('.admin-only').forEach(element => {
                element.style.display = 'block';
            });
        }
        
        // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        updateRecentActivity();
        
        // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º
        setupFormHandlers();
        
        // –°–ª—É—à–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤
        window.addEventListener('sectionsUpdated', function() {
            loadDynamicSections();
            updateRecentActivity();
        });
        
        // –û–±–Ω–æ–≤–ª—è—Ç—å —Ä–∞–∑–¥–µ–ª—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ localStorage
        window.addEventListener('storage', function(e) {
            if (e.key === 'uptaxi_sections') {
                loadDynamicSections();
            }
        });
    }
});
