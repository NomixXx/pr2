// Updated menu system for server-side
const apiClient = {} // Declare apiClient variable
const auth = {} // Declare auth variable
const checkAuth = () => true // Declare checkAuth function
const loadDynamicSections = () => {} // Declare loadDynamicSections function
const updateRecentActivity = () => {} // Declare updateRecentActivity function
const switchToContent = () => {} // Declare switchToContent function
const setupResizeHandlers = () => {} // Declare setupResizeHandlers function
const closeModal = (modalId) => {} // Declare closeModal function

class SectionManager {
  constructor() {
    this.sections = []
  }

  async loadSections() {
    try {
      this.sections = await apiClient.getSections()
    } catch (error) {
      console.error("Failed to load sections:", error)
      this.sections = []
    }
  }

  getSections() {
    return this.sections
  }

  getSectionsForUser(userAccessLevel) {
    return this.sections.filter((section) => section.access_level <= userAccessLevel)
  }
}

class ContentManager {
  constructor() {
    this.activities = []
  }

  async loadActivities() {
    try {
      this.activities = await apiClient.getActivities()
    } catch (error) {
      console.error("Failed to load activities:", error)
      this.activities = []
    }
  }

  async addContent(sectionId, subsectionId, title, description) {
    try {
      await apiClient.createContent({
        sectionId,
        subsectionId,
        title,
        description,
      })
      await this.addActivity(`–î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${title}`, "üìù")
    } catch (error) {
      console.error("Failed to add content:", error)
      throw error
    }
  }

  async addGoogleDoc(title, url, sectionId, subsectionId) {
    try {
      await apiClient.createGoogleDoc({
        title,
        url,
        sectionId,
        subsectionId,
      })
      await this.addActivity(`–î–æ–±–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: ${title}`, "üìÑ")
    } catch (error) {
      console.error("Failed to add Google doc:", error)
      throw error
    }
  }

  async addFile(file, sectionId, subsectionId) {
    try {
      await apiClient.uploadFile(file, sectionId, subsectionId)
      await this.addActivity(`–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: ${file.name}`, "üìÅ")
    } catch (error) {
      console.error("Failed to upload file:", error)
      throw error
    }
  }

  async addActivity(title, icon) {
    try {
      await apiClient.createActivity({ title, icon })
      await this.loadActivities()
    } catch (error) {
      console.error("Failed to add activity:", error)
    }
  }

  getActivities() {
    return this.activities.slice(-5).reverse()
  }

  async getContent(sectionId, subsectionId) {
    try {
      const response = await apiClient.getContent(sectionId, subsectionId)
      return {
        content: response.content || [],
        googleDocs: response.googleDocs || [],
        files: response.files || [],
      }
    } catch (error) {
      console.error("Failed to get content:", error)
      return { content: [], googleDocs: [], files: [] }
    }
  }
}

// Global instances
const sectionManager = new SectionManager()
const contentManager = new ContentManager()

// Updated initialization
document.addEventListener("DOMContentLoaded", async () => {
  if (checkAuth()) {
    const user = auth.currentUser

    // Load data from server
    await sectionManager.loadSections()
    await contentManager.loadActivities()

    // Load dynamic sections
    loadDynamicSections()

    document.getElementById("currentUser").textContent = user.username
    document.getElementById("userInitials").textContent = user.username.charAt(0).toUpperCase()

    // Show admin panel for administrators
    if (auth.isAdmin()) {
      document.querySelectorAll(".admin-only").forEach((element) => {
        element.style.display = "block"
      })
    }

    // Load recent activities
    updateRecentActivity()

    // Setup form handlers
    setupFormHandlers()
  }
})

// Updated content display function
async function showContent(sectionId, subsectionId) {
  if (event) event.preventDefault()

  const user = auth.currentUser
  const sectionData = sectionManager.sections.find((s) => s.id === sectionId)
  const subsectionData = sectionData?.subsections.find((sub) => sub.id === subsectionId)

  if (!sectionData || !subsectionData) {
    alert("–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return
  }

  // Check user access
  if (user.role !== "admin") {
    const userAccessLevel = user.accessLevel || 1
    if (userAccessLevel !== subsectionData.access_level) {
      alert("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
      return
    }
  }

  switchToContent()

  const contentArea = document.getElementById("dynamic-content")
  if (!contentArea) return

  // Update breadcrumbs
  const breadcrumb = document.getElementById("breadcrumb")
  if (breadcrumb) {
    breadcrumb.innerHTML = `<span>–ì–ª–∞–≤–Ω–∞—è</span><span class="separator">></span><span>${sectionData.name} - ${subsectionData.name}</span>`
  }

  // Get content from server
  const { content, googleDocs, files } = await contentManager.getContent(sectionId, subsectionId)

  let html = `
        <div class="section-header">
            <h1>${sectionData.name} - ${subsectionData.name}</h1>
            <p>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ä–∞–∑–¥–µ–ª–∞</p>
            <div class="section-actions" style="margin-top: 15px; display: flex; gap: 10px; flex-wrap: wrap; justify-content: center;">
                <button onclick="showDashboard()" class="btn-primary">
                    <span class="icon">üè†</span>
                    –ì–ª–∞–≤–Ω–∞—è
                </button>
                ${
                  auth.isAdmin() || user.role === "admin"
                    ? `
                    <button onclick="openAddContentModal('${sectionId}', '${subsectionId}')" class="btn-primary">
                        <span class="icon">üìù</span>
                        –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    </button>
                    <button onclick="openAddDocModal('${sectionId}', '${subsectionId}')" class="btn-primary">
                        <span class="icon">üìÑ</span>
                        –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
                    </button>
                    <button onclick="openUploadFileModal('${sectionId}', '${subsectionId}')" class="btn-primary">
                        <span class="icon">üìÅ</span>
                        –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã
                    </button>
                `
                    : ""
                }
            </div>
        </div>
    `

  const totalItems = content.length + googleDocs.length + files.length

  if (totalItems === 0) {
    html += `
            <div class="empty-state">
                <div class="empty-icon">üìÅ</div>
                <h3>–†–∞–∑–¥–µ–ª –ø—É—Å—Ç</h3>
                <p>–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.</p>
            </div>
        `
  } else {
    html += '<div class="content-grid">'

    // Display text content
    content.forEach((item) => {
      const isLongContent = item.description.length > 200
      const contentId = `content-${item.id}`
      const savedWidth = localStorage.getItem(`content-width-${item.id}`) || ""
      const widthStyle = savedWidth ? `style="width: ${savedWidth}px;"` : ""
      const adminResizable = auth.isAdmin() || user.role === "admin" ? "admin-resizable" : ""

      html += `
                <div class="content-card ${adminResizable}" ${widthStyle} data-content-id="${item.id}">
                    <div class="card-header">
                        <h3>${item.title}</h3>
                        <span class="date">${new Date(item.created_at).toLocaleDateString("ru-RU")}</span>
                    </div>
                    <div class="card-content">
                        <div class="content-text ${isLongContent ? "collapsed" : ""}" id="${contentId}">
                            ${item.description.replace(/\n/g, "<br>")}
                        </div>
                        ${
                          isLongContent
                            ? `
                            <button class="expand-btn" onclick="toggleContent('${contentId}', this)">
                                –ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ
                            </button>
                        `
                            : ""
                        }
                        ${
                          auth.isAdmin() || user.role === "admin"
                            ? `
                            <div style="display: flex; gap: 10px; margin-top: 10px;">
                                <button onclick="editContentFromMenu(${item.id}, '${item.title}', '${item.description.replace(/'/g, "\\'")}', '${sectionId}', '${subsectionId}')" class="btn-edit" style="padding: 5px 10px; font-size: 12px;">
                                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                </button>
                                <button onclick="deleteContentFromMenu(${item.id}, '${sectionId}', '${subsectionId}')" class="btn-danger" style="padding: 5px 10px; font-size: 12px;">
                                    –£–¥–∞–ª–∏—Ç—å
                                </button>
                            </div>
                        `
                            : ""
                        }
                    </div>
                </div>
            `
    })

    // Display Google docs
    googleDocs.forEach((doc) => {
      html += `
                <div class="content-card">
                    <div class="card-header">
                        <h3>üìÑ ${doc.title}</h3>
                        <span class="date">${new Date(doc.created_at).toLocaleDateString("ru-RU")}</span>
                    </div>
                    <div class="card-content">
                        <p>Google –¥–æ–∫—É–º–µ–Ω—Ç</p>
                        <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                            <button onclick="openGoogleDocEmbed('${doc.url}', '${doc.title}')" class="doc-embed-link">
                                <span class="icon">üëÅÔ∏è</span>
                                –ü—Ä–æ—Å–º–æ—Ç—Ä
                            </button>
                            <a href="${doc.url}" target="_blank" class="doc-link">
                                <span class="icon">üîó</span>
                                –û—Ç–∫—Ä—ã—Ç—å –≤ Google
                            </a>
                        </div>
                        ${
                          auth.isAdmin() || user.role === "admin"
                            ? `
                            <button onclick="deleteDocFromMenu(${doc.id}, '${sectionId}', '${subsectionId}')" class="btn-danger" style="margin-top: 10px; padding: 5px 10px; font-size: 12px;">
                                –£–¥–∞–ª–∏—Ç—å
                            </button>
                        `
                            : ""
                        }
                    </div>
                </div>
            `
    })

    // Display files
    files.forEach((file) => {
      if (file.type && file.type.startsWith("image/")) {
        html += `
                    <div class="photo-gallery-item" onclick="viewPhoto('${file.url}', '${file.name}')">
                        <img src="${file.url}" alt="${file.name}">
                        <div class="photo-info">
                            <div class="photo-title">${file.name}</div>
                            <div class="photo-date">${new Date(file.created_at).toLocaleDateString("ru-RU")}</div>
                        </div>
                        ${
                          auth.isAdmin() || user.role === "admin"
                            ? `
                            <button onclick="event.stopPropagation(); deleteFileFromMenu(${file.id}, '${sectionId}', '${subsectionId}')" class="btn-danger" style="position: absolute; top: 10px; right: 10px; padding: 5px 8px; font-size: 12px;">
                                ‚úï
                            </button>
                        `
                            : ""
                        }
                    </div>
                `
      } else {
        html += `
                    <div class="content-card">
                        <div class="card-header">
                            <h3>üìÅ ${file.name}</h3>
                            <span class="date">${new Date(file.created_at).toLocaleDateString("ru-RU")}</span>
                        </div>
                        <div class="card-content">
                            <p>–§–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è</p>
                            <a href="${file.url}" target="_blank" class="doc-link">–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª</a>
                            ${
                              auth.isAdmin() || user.role === "admin"
                                ? `
                                <button onclick="deleteFileFromMenu(${file.id}, '${sectionId}', '${subsectionId}')" class="btn-danger" style="margin-top: 10px; padding: 5px 10px; font-size: 12px;">
                                    –£–¥–∞–ª–∏—Ç—å
                                </button>
                            `
                                : ""
                            }
                        </div>
                    </div>
                `
      }
    })

    html += "</div>"
  }

  contentArea.innerHTML = html

  if (auth.isAdmin() || user.role === "admin") {
    setupResizeHandlers()
  }
}

// Updated delete functions
async function deleteContentFromMenu(id, sectionId, subsectionId) {
  if (!auth.isAdmin() && auth.currentUser.role !== "admin") return

  if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?")) {
    try {
      await apiClient.deleteContent(id)
      showContent(sectionId, subsectionId)
    } catch (error) {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: " + error.message)
    }
  }
}

async function deleteDocFromMenu(id, sectionId, subsectionId) {
  if (!auth.isAdmin() && auth.currentUser.role !== "admin") return

  if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç?")) {
    try {
      await apiClient.deleteGoogleDoc(id)
      showContent(sectionId, subsectionId)
    } catch (error) {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: " + error.message)
    }
  }
}

async function deleteFileFromMenu(id, sectionId, subsectionId) {
  if (!auth.isAdmin() && auth.currentUser.role !== "admin") return

  if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª?")) {
    try {
      await apiClient.deleteFile(id)
      showContent(sectionId, subsectionId)
    } catch (error) {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: " + error.message)
    }
  }
}

// Updated form handlers
function setupFormHandlers() {
  // Content form
  const addContentForm = document.getElementById("addContentForm")
  if (addContentForm) {
    addContentForm.addEventListener("submit", async (e) => {
      e.preventDefault()

      const sectionId = document.getElementById("contentSectionId").value
      const subsectionId = document.getElementById("contentSubsectionId").value
      const title = document.getElementById("contentTitle").value
      const description = document.getElementById("contentDescription").value

      if (!sectionId || !subsectionId || !title.trim() || !description.trim()) {
        alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
        return
      }

      try {
        await contentManager.addContent(sectionId, subsectionId, title, description)
        closeModal("addContentModal")
        addContentForm.reset()
        showContent(sectionId, subsectionId)
        alert("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
      } catch (error) {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: " + error.message)
      }
    })
  }

  // Doc form
  const addDocForm = document.getElementById("addDocForm")
  if (addDocForm) {
    addDocForm.addEventListener("submit", async (e) => {
      e.preventDefault()

      const sectionId = document.getElementById("docSectionId").value
      const subsectionId = document.getElementById("docSubsectionId").value
      const title = document.getElementById("docTitle").value
      const url = document.getElementById("docUrl").value

      if (!sectionId || !subsectionId || !title.trim() || !url.trim()) {
        alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
        return
      }

      try {
        await contentManager.addGoogleDoc(title, url, sectionId, subsectionId)
        closeModal("addDocModal")
        addDocForm.reset()
        showContent(sectionId, subsectionId)
        alert("–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
      } catch (error) {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: " + error.message)
      }
    })
  }
}

// Updated file upload
async function uploadFiles() {
  const fileInput = document.getElementById("fileUpload")
  const files = fileInput.files
  const sectionId = document.getElementById("fileSectionId").value
  const subsectionId = document.getElementById("fileSubsectionId").value

  if (files.length === 0) {
    alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
    return
  }

  if (!sectionId || !subsectionId) {
    alert("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª")
    return
  }

  try {
    for (const file of files) {
      await contentManager.addFile(file, sectionId, subsectionId)
    }

    closeModal("uploadFileModal")
    fileInput.value = ""
    alert("–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    showContent(sectionId, subsectionId)
  } catch (error) {
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: " + error.message)
  }
}

// Keep all other functions from the original menu.js unchanged
// (toggleContent, viewPhoto, openGoogleDocEmbed, etc.)
